# Tái cấu trúc Widget:
1: Refactor into method: 
Text buildHello() => Text('Hello');
2: Refactor into widget: Tận dụng được các benifits của widget lifecycle, ngăn chặn lại việc render không cần thiết

# Quản lý trạng thái với Bloc_Pattern
- Quản lý trạng thái trong cùng 1 widget: Có thể dùng StatefullWidget
- Quản lý trạng thái toàn bộ ứng dụng: State Management: 
	+ Provider: Đưa tất cả trạng thái lên đầu cây thư mục flutter, mỗi khi thay đổi data, flutter sẽ tự động render lại widgets bị changed 
	+ GetIt: Tạo một đối tượng để tất cả các widget có thể truy xuất đến nó (Một biến cục bộ)
	+ Bloc: Xu hướng hiện nay: https://somniosoftware.com/post/fundamentals-of-the-the-bloc-pattern

## Để lưu trữ dữ liệu cục bộ:
	+ shared_preferences: Lưu trữ dữ liệu trong Ram của ứng dụng Android.
	+ SqlLite: Lưu trữ thông tin trong file

## Lưu trữ từ xa: 
- Rest API: Get, Put, Post, Delete,.. => Backend - Frontend - Mobile,...
- SDK Google,...: Lưu trữ files,...

## Shortcut Key
- Wrap Widget: Ctrl + Shift + R: Build sang local varriable, method or widget (ful, less)

### Dùng const ngay khi có thể
- Giá trị được gán vào thời điểm khởi tạo. Trong khi final thì có thể gán giá trị vào thời điểm runtime
- Widget cha đã dùng const thì ở widget con không cần dùng. Sử dụng const sẽ hiệu quả khi hot reload lại ứng dụng khi coding
- Không sử dụng const khi không cần thiết



### Tip
- Kỹ thuật sử dụng constructor để truyền data từ widget cha xuống widget con người ta gọi là Passing state down






















